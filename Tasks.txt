Jab Bhi project bnao to ek chij ka dhyan rkhna hai 
    --> Seperation of Concern (Jo jiska kaam whi kre)
        --> Templates --> views Folder
        --> Static Files --> public Folder
        --> Routes --> routes Folder
        --> Collections/Schema --> Models
        
While working with DB most of the functions return a promise and to avoid the chaining of these promises we use Async-Await
        
app pure application ka instance hota hai and ek application ka ek time pr ek se jaada instance nhi ho skta hai.
to agr humko app ko export krne ki jrurt dikhai deti hai like routes me app.get || app.post use krte hai to wha hum
export nhi krenge ,  express me Router naam ka ek function hota hai jo ek mini instance ka kaam krta hai aur hum iske 
use se get aur post kr skte hai like router.get || router.post.

ejs is not a view engine but a templating language 
express have its own view engine by default
app.set('view engine', 'ejs');  --> this line states that now the view engine will be viewing ejs files.
we can change this default engine to ejs-mate which is a view engine for layouts.


//Day-1

Tasks:
    0. Set-Up
        -->npm init -y
        -->npm i express nodemon ejs mongoose
        -->package.josn me "start" script add kiya
    
    1. Basic Server Created And Checked.
        -->express require kiya
        -->port 8080 pr listen kiya
        -->view engine , views folder and public folder set kiya
    
    2. DB Connected And Checked.
        -->mongoose.connect() ki help se DB connect kiya
    
    3. Made Schema in Models Folder.
        -->mongoose require kiya
        -->mongoose.Schema me initial/dummy products ka object pass kr ke ek Schema bnaya 
        -->mongoose.model() ke use se schema ka model bnaya aur usse export kiya.
    
    4. Add Initial Data / Dummy Data.( iske liye seed.js file bnate hai ) // seedDB sirf aur sirf ek baar krna hai uske baad comment kr dena hai nhi to jb bhi server refresh hoga data seed hoga.
        -->mongoose require kiya
        -->model require kiya
        -->initial products ka array bnaya
        -->ek function bnaya jo seed krne ke kaam aayega (seedDB)
            -->seed krne ke liye insertMany ka use kiya hai, jo promise return krega to uske aage await lga diya.
            -->to function ko async bnana pda.
        -->ab is function ko export kr diya

    5. Show Products on page from DB.
        --> restfull ko follow krte huye products show krne ke liye index.ejs bnaya.
        --> routes me phle model ko require kiya jisse hum DB se read kr paye.
        --> products ko find() ki help se read kiya and usse index.js pr render kr diya.
        --> hum app.get | app.post ka use nhi kr skte to uski jgh humko express.Router ka use krna hai
        --> is router ko hum mini app ki trh use kr skte hai aur last me isko export kr denge


//Day-2


    6. Changed default view engine to ejs-mate view engine.
        -->installed ejs-mate 
        -->require as ejsMate
        -->app.engine('ejs', ejsMate);
        
    7. seperated the boilerplate, partial parts(like navbar)
        --> views ke andr layouts aur partials ka folder banya hai 
        --> layout aur partials ko index .ejs me include kiya hai 
        --> bootstrap ke use se thoda bhut stylling ki hai.

    8.  Adding new product
        -->express.urlencoded middle ware use kiya incoming request ko parse krne ke liye
        -->route bnaya new product add krne ke liye(GET)
        -->new.js me form banaya product ki Details collect krne ke liye
        -->route ki help se products ke page pr product actually add kiya(POST)

    9.  Adding View functionality
        -->ek route bnayenge perticular product ko view krne ke liye
        -->req.params se id nikalenge 
        -->id use kr ke DB se product find krenge 
        -->foundProduct ko show.ejs pr show krenge.

    10. Edit functionality 
        --> ek route bnaya form show krne ke liye( edit.ejs pr )
        --> method-ovverride install kr ke use kiya so that hum form se put patch delete request bhej ske
        --> form me method-ovverride krke Patch request bhej diya
        --> routes me patch request ke liye route bnaya
        --> id ke help se update krke redirect kr diya

    11. Delete functionality
        --> delete ke liye humko Post request ko override krna hoga Delete request me 
        --> post request form ka part hai to hum delete krne ke liye ek form bnayenge index.ejs me.
        --> form se post ko override kr ke delete request bheja
        --> route me delete request ke liye route bnaya
        --> id ki help se find aur delete kiya 
        --> products page pr redirect kiya
    
    12. Reviews functionality
        -->Reviews generally rating aur comments hota hai
        -->relation 1:many hoga 
        -->iske liye phle ek schema bnaya
        -->humko product aur review ko connect krna pdega to uske liye product schema me ek review field bnayi hai
        -->reviews multiple ho skti hai to wo ek array hogi
        -->ab ek review ko hum pura nhi store krna chahte hai products me to sirf uski unique id store krenge
        -->review ka type ObjectId ho (mongoose.Schema.Types.ObjectId ye use kr ke)
        -->aur humko ye bhi btana pdega ki ye id kha ja kr check krna hai to hum ref me reviews ka model denge.

//Day-3
     --Continuing Review functionality
        -->humko review ke liye input lena pdega jo hum show.ejs pr ek form bna kr le skte hai.
        -->review routes ko use krne ke liye hum usko app.js me require krenge then middleWare jaise use kr lenge so that ki wo har incoming request pr path check kr paye.
        -->ab humko review ko apne review wale collection me add krna pdega aur uski id product ke reviews wale array me.
        -->ab hum product ko id ke use se find krenge and ek new review bnayenge then product ke reviews wale array me usse add kr denge 
        -->ab humko dono collections me changes krna hoga to hum dono ke save kr denge 
        -->then hum redirect kr denge
        -->jo review humne add kiya hai usko show bhi krna pdega.
        -->review hum whi show krenge jha humko product dikh rha hai(jab ek perticular product ko show krenge tbhi uske saath reviews bhi populate/show kr denge)
        -->ab populate krne ke baad usko show krne ke liye jgh chahiye to humne ek card liya hai bootstrap se aur usme show kr diya and starablity ke use se rating ko stars me convert kiya hai.
        -->review ke saath humko uska time bhi dikhna chahiye to hum uske liye schema me ek dusra object pass kr denge jiske andr timestamps: true pass krenge.
        -->timestamps humko 2 chijo ka access ka deta hai (createdAt, updatedAt) jo hmare review ke saath collection me save ho jayega.
        -->but timestamps date formate me nhi hota hai to usko show krne ke liye humko usse phle date formate me convert krna pdega.
        -->ES5 me is conversion ke liye built-in function hai toDateString(), toTimeString(),   isko use krne ke liye review.createdAt.toDateString() ye kr skte hai
        -->agr hum koi ek product delete krte hai to humko usse related saare reviews bhi delete krna pdega.
            -iske 2 tarike hai 
                -product ke reviews wale array pr loop lagao aur findByIdAndDelete kr do but ye efficient way nhi hai
                -findByIdAndDelete/findByIdAndUpdate jaise functions behind the scene ek middleWare hi use krte hai like findOneAndDelete/findOneAndUpdate
                -findByIdAndDelete(id) is equivalent to findOneAndDelete({_id:id})
                -aur hmare paas kuch Schema ke middleWare hote hai like pre, post. Jinka use kr ke hum ye bta skte hai ki us schema se bne huye model pr koi middleware use kr rhe to uske saath aur kya kya krna hai 
                - like : 
                                productSchema.post('findOneAndDelete', async function(){
                                    if(product.reviews.length>0){
                                        await Review.deleteMany({_id:{$in:product.reviews}})
                                    }
                                })
                    this is a reference used in my Product Model.
        